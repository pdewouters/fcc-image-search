{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AACA,QAAQ,QAAR,EAAkB,MAAlB;;AAOA,IAAM,MAAM,wBAAN;AACN,IAAI,GAAJ,CAAQ,MAAR,EAAiB,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAApB,CAAjB;;AAEA,IAAI,GAAJ,CAAQ,GAAR,EAAa,UAAC,GAAD,EAAM,GAAN,EAAc;AACvB,QAAI,IAAJ,CAAS,6DAAT,EADuB;CAAd,CAAb;;;AAKA,IAAI,GAAJ,CAAQ,iCAAR,EAA2C,UAAC,GAAD,EAAM,GAAN,EAAc;;AAErD,QAAI,SAAS,2BAAgB,EAAC,YAAY,IAAI,MAAJ,CAAW,MAAX,EAA7B,CAAT,CAFiD;AAGrD,WAAO,IAAP,CAAY,UAAC,GAAD,EAAK,KAAL,EAAe;AACvB,YAAI,GAAJ,EAAS,QAAQ,GAAR,CAAY,GAAZ,EAAT;KADQ,CAAZ,CAHqD;;AAOrD,QAAM,UAAU;AACZ,aAAK,+CAA+C,sBAAY,MAAZ,CAAmB,IAAI,MAAJ,CAAW,MAAX,CAAlE,GAAuF,GAAvF,GAA8F,sBAAY,SAAZ,CAAsB,IAAI,KAAJ,CAApH;AACL,iBAAS,EAAC,iBAAiB,eAAe,QAAQ,GAAR,CAAY,gBAAZ,EAA1C;KAFE,CAP+C;;AAYrD,aAAS,QAAT,CAAkB,KAAlB,EAAyB,QAAzB,EAAmC,IAAnC,EAAyC;AACrC,YAAI,CAAC,KAAD,IAAU,SAAS,UAAT,IAAuB,GAAvB,EAA4B;AACtC,gBAAI,OAAO,KAAK,KAAL,CAAW,IAAX,CAAP,CADkC;AAEtC,gBAAI,IAAJ,CAAS,KAAK,IAAL,CAAU,GAAV,CAAc,kBAAU;AAC7B,uBAAO,iBAAE,IAAF,CAAO,MAAP,EAAe,CAAC,OAAD,EAAS,MAAT,CAAf,CAAP,CAD6B;aAAV,CAAvB,EAFsC;SAA1C;KADJ;AAQA,2BAAQ,OAAR,EAAgB,QAAhB,EApBqD;CAAd,CAA3C;;AAuBA,IAAI,GAAJ,CAAQ,yBAAR,EAAmC,UAAC,GAAD,EAAM,GAAN,EAAc;AAC7C,QAAI,MAAJ,CAAW,cAAX,EAA2B,kBAA3B,EAD6C;AAE7C,2BAAY,IAAZ,CAAiB,EAAjB,EAAoB,UAAC,GAAD,EAAM,IAAN,EAAa;AAC7B,YAAG,GAAH,EAAQ,QAAQ,GAAR,CAAY,GAAZ,EAAR;AACA,YAAI,IAAJ,CAAS,KAAK,GAAL,CAAS,eAAO;AACrB,mBAAO,iBAAE,IAAF,CAAO,GAAP,EAAW,CAAC,YAAD,EAAc,cAAd,CAAX,CAAP,CADqB;SAAP,CAAlB,EAF6B;KAAb,CAApB,CAF6C;CAAd,CAAnC;;;AAYA,IAAI,GAAJ,CAAQ,IAAR,EAAc,UAAC,GAAD,EAAM,GAAN,EAAc;AACxB,QAAI,MAAJ,CAAW,cAAX,EAA2B,kBAA3B,EADwB;AAExB,QAAI,IAAJ,CAAS,KAAK,SAAL,CAAe,EAAC,SAAQ,eAAR,EAAhB,CAAT,EAFwB;CAAd,CAAd;;AAKA,IAAM,aAAa,SAAb,UAAa,UAAW;AAC1B,WAAO,QAAQ,QAAR,GAAmB,KAAnB,GAA2B,QAAQ,GAAR,CAAY,MAAZ,CAA3B,GAAiD,GAAjD,CADmB;CAAX;;AAInB,IAAI,MAAJ,CAAW,IAAI,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChC,YAAQ,GAAR,CAAY,6BAAZ,EAA2C,IAAI,GAAJ,CAAQ,MAAR,CAA3C,EADgC;CAAN,CAA5B","file":"index.js","sourcesContent":["'use strict'\nrequire('dotenv').config();\nimport express from 'express'\nimport querystring from 'querystring'\nimport request from 'request'\nimport _ from 'lodash'\nimport SearchModel from './inc/search_model'\n\nconst app = express()\napp.set('port', (process.env.PORT || 5000))\n\napp.get('/', (req, res) => {\n    res.send('FCC Image Search - pagination parameter is page, not offset')\n})\n\n// /api/imagesearch/lolcats%20funny?offset=10\napp.get('/api/imagesearch/:search(*)/\\?*', (req, res) => {\n\n    let search = new SearchModel({searchTerm: req.params.search})\n    search.save((err,entry) => {\n        if (err) console.log(err)\n    })\n\n    const options = {\n        url: 'https://api.imgur.com/3/gallery/search/?q=' + querystring.escape(req.params.search) + '&' +  querystring.stringify(req.query),\n        headers: {'Authorization': 'Client-ID ' + process.env.IMGUR_CLIENT_KEY}\n    }\n    \n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            var info = JSON.parse(body);\n            res.send(info.data.map(result => {\n                return _.pick(result, ['title','link'])\n            }))\n        }\n    }\n    request(options,callback)\n})\n\napp.get('/api/latest/imagesearch', (req, res) => {\n    res.header(\"Content-Type\", \"application/json\")\n    SearchModel.find({},(err, docs)=>{\n        if(err) console.log(err)\n        res.send(docs.map(doc => {\n            return _.pick(doc,['searchTerm','timeSearched'])\n        }))\n    })\n\n})\n\n// Fallback\napp.get('/*', (req, res) => {\n    res.header(\"Content-Type\", \"application/json\")\n    res.send(JSON.stringify({'error':'invalid route'}))\n})\n\nconst getSiteUrl = request => {\n    return request.protocol + '://' + request.get('Host') + '/'\n}\n\napp.listen(app.get('port'), () => {\n  console.log('Node app is running on port', app.get('port'));\n})"]}